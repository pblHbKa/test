&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СформироватьНаСервере(Неопределено, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ПроверитьИзмененияНастроек", 1, Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИзмененияНастроек()
	Если ПользовательскиеНастройкиМодифицированы Тогда
		СформироватьНаСервере(Неопределено, Истина);
		ПользовательскиеНастройкиМодифицированы = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере(НеобновляемыйЭлемент = Неопределено, НачальнаяИнициализация = Ложь)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	СхемаКомпоновки =  ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ДанныеРасшифровкиКомпоновкиДанных = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	
    КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновки,
								Отчет.КомпоновщикНастроек.ПолучитьНастройки(), 
								ДанныеРасшифровкиКомпоновкиДанных);
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,, ДанныеРасшифровкиКомпоновкиДанных, Истина);
    ПроцессорВыводаРезультата = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	РезультатОтчета = Новый ТабличныйДокумент;
	
    ПроцессорВыводаРезультата.УстановитьДокумент(РезультатОтчета);
    ПроцессорВыводаРезультата.Вывести(ПроцессорКомпоновкиДанных);
		
	ЗаполнитьДиаграммы(НеобновляемыйЭлемент, РезультатОтчета, 
					   ДанныеРасшифровкиКомпоновкиДанных, НачальнаяИнициализация);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграммы(НеобновляемыйЭлемент, РезультатОтчета, 
							 ДанныеРасшифровкиКомпоновкиДанных, НачальнаяИнициализация)
	
	Если Элементы.ДиаграммаПоПериодам <> НеобновляемыйЭлемент Тогда
		Элементы.ДиаграммаПоПериодам.УстановитьВыделенныеЭлементы(Новый Массив());
		ДиаграммаПоПериодам = РезультатОтчета.Рисунки[0].Объект;
		
		Если ДанныеРасшифровкиПоПериодам = "" Тогда
			ДанныеРасшифровкиПоПериодам = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКомпоновкиДанных, 
																		УникальныйИдентификатор);
		Иначе																		   
		 	ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКомпоновкиДанных, ДанныеРасшифровкиПоПериодам);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ДиаграммаПоПокупателям <> НеобновляемыйЭлемент Тогда
		Элементы.ДиаграммаПоПокупателям.УстановитьВыделенныеЭлементы(Новый Массив());
		ДиаграммаПоПокупателям = РезультатОтчета.Рисунки[1].Объект;
		
		Если ДанныеРасшифровкиПоПокупателям = "" Тогда
			ДанныеРасшифровкиПоПокупателям = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКомпоновкиДанных, 
																		   УникальныйИдентификатор);
		Иначе																		   
		 	ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКомпоновкиДанных, ДанныеРасшифровкиПоПокупателям);
		КонецЕсли;
		
		Если НачальнаяИнициализация Тогда
			ЗапомнитьЦветаСерий(ДиаграммаПоПокупателям, ДанныеРасшифровкиКомпоновкиДанных, ЦветаПокупателей);
		Иначе 
			ПроставитьЦветаСерий(ДиаграммаПоПокупателям, ДанныеРасшифровкиКомпоновкиДанных, ЦветаПокупателей);
		КонецЕсли;
	КонецЕсли;
																
	Если Элементы.ДиаграммаПоТоварам <> НеобновляемыйЭлемент Тогда
		Элементы.ДиаграммаПоТоварам.УстановитьВыделенныеЭлементы(Новый Массив());
		ДиаграммаПоТоварам = РезультатОтчета.Рисунки[2].Объект;
		
		Если ДанныеРасшифровкиПоТоварам = "" Тогда
			ДанныеРасшифровкиПоТоварам = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКомпоновкиДанных, 
																	   УникальныйИдентификатор);
		Иначе																		   
		 	ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКомпоновкиДанных, ДанныеРасшифровкиПоТоварам);
		КонецЕсли;
		
		Если НачальнаяИнициализация Тогда
			ЗапомнитьЦветаТочек(ДиаграммаПоТоварам, ДанныеРасшифровкиКомпоновкиДанных, ЦветаТоваров);
		Иначе 
			ПроставитьЦветаТочек(ДиаграммаПоТоварам, ДанныеРасшифровкиКомпоновкиДанных, ЦветаТоваров);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере 
Функция НайтиЭлементВПользовательскихНастройках(ИдентификаторНастройки)
	
	Для Каждого Элемент Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторНастройки Тогда 			
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция РасшифровкаВЗначение(Расшифровка, ДанныеРасшифровкиКомпоновкиДанных)
	
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		ЭлементРасшифровки = ДанныеРасшифровкиКомпоновкиДанных.Элементы[Расшифровка];
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
				Возврат Поле.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура ЗапомнитьЦветаСерий(Диаграмма, ДанныеРасшифровкиКомпоновкиДанных, СоответствиеЦветов)
	
	Соответствие = Новый Соответствие;
	
	Палитра = Диаграмма.ПолучитьПалитру(); 
	
	Для ИндексСерии = 0 По Диаграмма.КоличествоСерий - 1 Цикл 
		
		Серия = Диаграмма.Серии[ИндексСерии];
		Значение = РасшифровкаВЗначение(Серия.Расшифровка, ДанныеРасшифровкиКомпоновкиДанных);
		ЦветСерии = Серия.Цвет;
		Если ЦветСерии.Вид = ВидЦвета.АвтоЦвет Тогда
			ЦветСерии = Палитра[ИндексСерии % Палитра.Количество()];
		КонецЕсли;
		
		Соответствие.Вставить(Значение, ЦветСерии);
		
	КонецЦикла;
	
	СоответствиеЦветов = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьЦветаСерий(Диаграмма, ДанныеРасшифровкиКомпоновкиДанных, СоответствиеЦветов);

	Для ИндексСерии = 0 По Диаграмма.КоличествоСерий - 1 Цикл 
		
		Серия = Диаграмма.Серии[ИндексСерии];
		Значение = РасшифровкаВЗначение(Серия.Расшифровка, ДанныеРасшифровкиКомпоновкиДанных);
		Цвет = СоответствиеЦветов.Получить(Значение);
		Если Цвет <> Неопределено Тогда 
			Серия.Цвет = Цвет;
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьЦветаТочек(Диаграмма, ДанныеРасшифровкиКомпоновкиДанных, СоответствиеЦветов)
	
	Соответствие = Новый Соответствие;
	
	Палитра = Диаграмма.ПолучитьПалитру(); 
	
	Для ИндексТочки = 0 По Диаграмма.КоличествоТочек - 1 Цикл 
		
		Точка = Диаграмма.Точки[ИндексТочки];
		Значение = РасшифровкаВЗначение(Точка.Расшифровка, ДанныеРасшифровкиКомпоновкиДанных);
		ЦветТочки = Точка.Цвет;
		Если ЦветТочки.Вид = ВидЦвета.АвтоЦвет Тогда
			ЦветТочки = Палитра[ИндексТочки % Палитра.Количество()];
		КонецЕсли;
		
		Соответствие.Вставить(Значение, ЦветТочки);
		
	КонецЦикла;
	
	СоответствиеЦветов = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьЦветаТочек(Диаграмма, ДанныеРасшифровкиКомпоновкиДанных, СоответствиеЦветов);

	Для ИндексТочки = 0 По Диаграмма.КоличествоТочек - 1 Цикл 
		
		Точка = Диаграмма.Точки[ИндексТочки];
		Значение = РасшифровкаВЗначение(Точка.Расшифровка, ДанныеРасшифровкиКомпоновкиДанных);
		Цвет = СоответствиеЦветов.Получить(Значение);
		Если Цвет <> Неопределено Тогда 
			Точка.Цвет = Цвет;
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция СоздатьЭлементОтбораПериода()
	
	ПараметрПериод = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	
	ПараметрПериод.Использование = Истина;
	ПараметрПериод.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;	 
	ПараметрПериод.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	
	СоздатьЭлементыФормыПользовательскихНастроек();
	
	Возврат ПараметрПериод.ИдентификаторПользовательскойНастройки;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначенияОтбораПериода(ЭлементОтбораПериода, МассивДат)
	
	Если МассивДат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МинимальнаяДата = '99990101';
	МаксимальнаяДата = '00010101';
	
	Для Каждого Дата Из МассивДат Цикл 
		МаксимальнаяДата = Макс(МаксимальнаяДата, Дата);
		МинимальнаяДата = Мин(МинимальнаяДата, Дата);
	КонецЦикла;
	
	ЭлементОтбораПериода.Значение.ДатаНачала = МинимальнаяДата;
	ЭлементОтбораПериода.Значение.ДатаОкончания = МаксимальнаяДата;
	ЭлементОтбораПериода.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОтборДляПериода(МассивДат)
	
	Если УИОтборПериод = "" Тогда
		УИОтборПериод = СоздатьЭлементОтбораПериода();
	КонецЕсли;
	
	ЭлементОтбораПериода = НайтиЭлементВПользовательскихНастройках(УИОтборПериод);

	УстановитьЗначенияОтбораПериода(ЭлементОтбораПериода, МассивДат);

КонецПроцедуры

&НаСервере
Процедура СброситьОтборДляПериода()
	Если УИОтборПериод <> "" Тогда
		ЭлементОтбораПериод = НайтиЭлементВПользовательскихНастройках(УИОтборПериод);
		ЭлементОтбораПериод.Использование = Ложь;
		СформироватьНаСервере();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияОтбораПокупателя(ЭлементОтбораПокупатель, МассивПокупателей)
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(МассивПокупателей);	
	
	ЭлементОтбораПокупатель.ПравоеЗначение = СписокЗначений;
	ЭлементОтбораПокупатель.Использование = Истина;
КонецПроцедуры

&НаСервере
Функция СоздатьЭлементОтбораПокупателя()
	
	Отбор = Отчет.КомпоновщикНастроек.Настройки.Отбор;
	
	ЭлементОтбораПокупателя = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораПокупателя.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Покупатель");
	ЭлементОтбораПокупателя.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбораПокупателя.Использование = Истина;
	ЭлементОтбораПокупателя.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;	 
	ЭлементОтбораПокупателя.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
		
	СоздатьЭлементыФормыПользовательскихНастроек();
	
	Возврат ЭлементОтбораПокупателя.ИдентификаторПользовательскойНастройки;
	
КонецФункции

&НаСервере
Процедура СоздатьОтборДляПокупателей(МассивПокупателей)
	
	Если УИОтборПокупатель = "" Тогда
		УИОтборПокупатель = СоздатьЭлементОтбораПокупателя();
	КонецЕсли;
	
	ЭлементОтбораПокупатель = НайтиЭлементВПользовательскихНастройках(УИОтборПокупатель);
	УстановитьЗначенияОтбораПокупателя(ЭлементОтбораПокупатель, МассивПокупателей);

КонецПроцедуры

&НаСервере
Процедура СброситьОтборДляПокупателей()
	Если УИОтборПокупатель <> "" Тогда
		ЭлементОтбораПокупатель = НайтиЭлементВПользовательскихНастройках(УИОтборПокупатель);
		ЭлементОтбораПокупатель.Использование = Ложь;
		СформироватьНаСервере();
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ДиаграммаПоПокупателямПриАктивизацииНаСервере()
	Выделение = Элементы.ДиаграммаПоПокупателям.ПолучитьВыделенныеЭлементы();
	Если Выделение.Количество() = 0 Тогда 
		СброситьОтборДляПокупателей();
		Возврат;
	КонецЕсли;
	
	МассивПокупателей = Новый Массив();
	
	Расшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровкиПоПокупателям); 
	
	Для Каждого Значение Из Выделение Цикл
		Серия = Неопределено;
		Если ТипЗнч(Значение) = Тип("ЗначениеДиаграммы") Тогда
			Серия = Значение.Серия;
		ИначеЕсли ТипЗнч(Значение) = Тип("СерияДиаграммы")Тогда 
			Серия = Значение;
		КонецЕсли;
		
		МассивПокупателей.Добавить(РасшифровкаВЗначение(Серия.Расшифровка, Расшифровки));
	КонецЦикла;
			
	СоздатьОтборДляПокупателей(МассивПокупателей);
	
	СформироватьНаСервере(Элементы.ДиаграммаПоПокупателям);
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПоПокупателямПриАктивизации(Элемент)
	ДиаграммаПоПокупателямПриАктивизацииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияОтбораТовара(ЭлементОтбораПокупатель, МассивТоваров)
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(МассивТоваров);	
	
	ЭлементОтбораПокупатель.ПравоеЗначение = СписокЗначений;
	ЭлементОтбораПокупатель.Использование = Истина;
КонецПроцедуры

&НаСервере
Функция СоздатьЭлементОтбораТовара()
	
	Отбор = Отчет.КомпоновщикНастроек.Настройки.Отбор;
	
	ЭлементОтбораТовара = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораТовара.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товар");
	ЭлементОтбораТовара.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбораТовара.Использование = Истина;
	ЭлементОтбораТовара.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;	 
	ЭлементОтбораТовара.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
		
	СоздатьЭлементыФормыПользовательскихНастроек();
	
	Возврат ЭлементОтбораТовара.ИдентификаторПользовательскойНастройки;
	
КонецФункции

&НаСервере
Процедура СоздатьОтборДляТоваров(МассивТоваров)
	
	Если УИОтборТовар = "" Тогда
		УИОтборТовар = СоздатьЭлементОтбораТовара();
	КонецЕсли;
	
	ЭлементОтбораТовара = НайтиЭлементВПользовательскихНастройках(УИОтборТовар);
	УстановитьЗначенияОтбораТовара(ЭлементОтбораТовара, МассивТоваров);

КонецПроцедуры

&НаСервере
Процедура СброситьОтборДляТоваров()
	Если УИОтборТовар <> "" Тогда
		ЭлементОтбораТовара = НайтиЭлементВПользовательскихНастройках(УИОтборТовар);
		ЭлементОтбораТовара.Использование = Ложь;
		СформироватьНаСервере();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПоПериодамОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПоПокупателямОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПоТоварамОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПоПериодамСброситьФильтр(Команда)
	СброситьОтборДляПериода();
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПоПокупателямСброситьФильтр(Команда)
	СброситьОтборДляПокупателей();
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПоТоварамСброситьФильтр(Команда)
	СброситьОтборДляТоваров();
КонецПроцедуры
