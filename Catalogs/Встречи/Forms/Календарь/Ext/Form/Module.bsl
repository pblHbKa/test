//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОкноПодгрузки = Новый Структура;
	ОкноПодгрузки.Вставить("Начало", ТекущаяДата());
	ОкноПодгрузки.Вставить("Конец", ТекущаяДата());

	ОтображатьВстречиДругихПользователей = РаботаСХранилищемОбщихНастроек.ПолучитьОтображениеВстречДругихПользователей();
	ЗаполнитьИзмеренияПланировщика();
	ПолучитьКодТекущегоПользователя();

	ВариантПериода = РаботаСХранилищемОбщихНастроек.ПолучитьВариантПериодаКалендаряВстреч();
	
	Планировщик.ШкалаВремени.Элементы[0].ФорматДня = ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
	
	ДатаОтображения = ТекущаяДата();
	ВыделитьПериодОтображения(ЭтотОбъект);
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериодаВЗаголовке(ЭтотОбъект);
	
	ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьДанныеПланировщикаКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтображенияПриИзменении(Элемент)
	
	ПлавнаяПрокрутка = Ложь;
	ПодключитьОбработчикОжидания("ОбновитьДанныеПланировщикаКлиентОбработчикОжидания", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтображенияПриАктивизацииДаты(Элемент)
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериодаВЗаголовке(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	Элементы.ГруппаВыбораДат.Скрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Начало", Начало);
	ЗначенияЗаполнения.Вставить("Окончание", Конец);
	
	Если Значения.Количество() = 0 Тогда
		ЗначенияЗаполнения.Вставить("Владелец", Неопределено);
	Иначе
		ЗначенияЗаполнения.Вставить("Владелец", Значения.Получить("Пользователь"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.Встречи.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("Встреча",	ВыделенныйЭлемент.Значение);
		ОбрабатываемыйЭлемент.Вставить("Начало",	ВыделенныйЭлемент.Начало);
		ОбрабатываемыйЭлемент.Вставить("Конец",		ВыделенныйЭлемент.Конец);
		
		Если Планировщик.Измерения.Количество() = 0 Тогда
			ОбрабатываемыйЭлемент.Вставить("Владелец",	Неопределено);
		Иначе
			ОбрабатываемыйЭлемент.Вставить("Владелец", ВыделенныйЭлемент.ЗначенияИзмерений.Получить("Пользователь"));
		КонецЕсли;
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	ОтменаРедактирования = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТекущегоЭлементаПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("Встреча", ВыделенныйЭлемент.Значение);
		ОбрабатываемыйЭлемент.Вставить("ПометкаУдаления", Истина);
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	Отказ = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	ПлавнаяПрокрутка = Истина;
	Если ВариантПериода = "Месяц" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущаяДата = ТекущаяДата();
		
		Если ТекущиеПериодыОтображения[0].Начало = НачалоДня(ТекущаяДата) Тогда
			ДатаОтображения = ТекущаяДата;
		ИначеЕсли ТекущиеПериодыОтображения[0].Начало < Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
			ДатаОтображения = ДобавитьМесяц(ДатаОтображения, -1);
		ИначеЕсли ТекущиеПериодыОтображения[0].Начало > Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
			ДатаОтображения = ДобавитьМесяц(ДатаОтображения, 1);
		КонецЕсли;
		
		ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
		Планировщик.ТекущиеПериодыОтображения.Очистить();
		Планировщик.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
		
		Планировщик.ИнтервалыФона.Очистить();
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоНедели(НачалоМесяца(ДатаОтображения)), НачалоМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(230, 230, 230);
		
		Интервал = Планировщик.ИнтервалыФона.Добавить(КонецМесяца(ДатаОтображения), КонецНедели(КонецМесяца(ДатаОтображения)));
		Интервал.Цвет = Новый Цвет(230, 230, 230);
			
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДата), КонецДня(ТекущаяДата));
	    Интервал.Цвет = Новый Цвет(223, 255, 223);
		
		ПлавнаяПрокрутка = Ложь;
		
	Иначе
		
		ДатаОтображения = ТекущиеПериодыОтображения[0].Начало;
		
	КонецЕсли;
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериодаВЗаголовке(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	ОбновитьДанныеПланировщикаКлиент(ПлавнаяПрокрутка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТекущегоЭлементаПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикНажатиеНаПеренесенномЗаголовкеШкалыВремени(Элемент, Дата)
	
	Если ВариантПериода = "Неделя" Тогда
		ВариантПериода = "День";
		ДатаОтображения = НачалоДня(Дата);
		ПриИзмененииВариантПериода();
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикНажатиеНаЭлементеШкалыВремени(Элемент, ЭлементШкалыВремени, Дата)

	Если ВариантПериода = "Месяц" Тогда
		ВариантПериода = "День";
		ДатаОтображения = НачалоДня(Дата);
		ПриИзмененииВариантПериода();
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикНажатиеНаЭлементеИзмерения(Элемент, ЭлементИзмерения, ЗначенияИзмерений, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Пользователь = ПолучитьПользователяПоКоду(ЭлементИзмерения.Значение);
	ПараметрыФормы = Новый Структура("Ключ", Пользователь);
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаЭлемента", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВстречиДругихПользователейПриИзменении(Элемент)
	
	РаботаСХранилищемОбщихНастроек.СохранитьОтображениеВстречДругихПользователей(ОтображатьВстречиДругихПользователей);
	ПолучитьКодТекущегоПользователя();
	ЗаполнитьИзмеренияПланировщика();
	ОбновитьДанныеПланировщикаКлиент();
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ 
//

// Возвращает период отображения Планировщика на основе текущих настроек
//
// Параметры:
//
// ВариантПериода - день/неделя/месяц для текущей даты
// ДатаОтображения - текущая дата отображения
//
// Возвращаемое значение: 
// Структура - дата начала и дата окончания периода.
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПериодДанных(ВариантПериода, ДатаОтображения)
	
	Результат = Новый Структура("ДатаНачала, ДатаОкончания");
	
	Если ВариантПериода = "День" Тогда
		Результат.ДатаНачала	= НачалоДня(ДатаОтображения);
		Результат.ДатаОкончания	= КонецДня(ДатаОтображения);
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		Результат.ДатаНачала	= НачалоНедели(ДатаОтображения);
		Результат.ДатаОкончания	= КонецНедели(ДатаОтображения);
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		Результат.ДатаНачала	= НачалоНедели(НачалоМесяца(ДатаОтображения));
		Результат.ДатаОкончания	= КонецНедели(КонецМесяца(ДатаОтображения));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выделяет соотвествующие даты в поле календаря
//
// Параметры:
//
// Форма - форма, в которой расположен календарь
&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьДатыОтображения(Форма)
	
	ПолеКалендаря = Форма.Элементы.ДатаОтображения;
	
	ПолеКалендаря.ВыделенныеДаты.Очистить();
	
	Если Форма.ВариантПериода = "Месяц" Тогда
		// Для варианта "Месяц" выделенные даты календаря отличаются от фактического периода.
		// Фактический период должен быть кратен 7 дням (недели).
		// Но в поле календаря выделяются даты только в пределах месяца.
		ПериодДанных = Новый Структура("ДатаНачала, ДатаОкончания");
		ПериодДанных.ДатаНачала		= НачалоМесяца(Форма.ДатаОтображения);
		ПериодДанных.ДатаОкончания	= КонецМесяца(Форма.ДатаОтображения);
	Иначе
		ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
	КонецЕсли;
	
	ТекДата = ПериодДанных.ДатаНачала;
	
	Пока ТекДата < ПериодДанных.ДатаОкончания Цикл
		ПолеКалендаря.ВыделенныеДаты.Добавить(ТекДата);
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
КонецПроцедуры

// Выделяет соотвествующий период отображения
//
// Параметры:
//
// Форма - форма, в которой расположен календарь
&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьПериодОтображения(Форма)
	
	Форма.Элементы.ФормаДень.Пометка = Ложь;
	Форма.Элементы.ФормаНеделя.Пометка = Ложь;
	Форма.Элементы.ФормаМесяц.Пометка = Ложь;
	
	Если Форма.ВариантПериода = "День" Тогда
		Форма.Элементы.ФормаДень.Пометка = Истина;
	ИначеЕсли Форма.ВариантПериода = "Неделя" Тогда
		Форма.Элементы.ФормаНеделя.Пометка = Истина;
	ИначеЕсли Форма.ВариантПериода = "Месяц" Тогда
		Форма.Элементы.ФормаМесяц.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры


// Сохраняет измененные встречи в справочнике
//
// Параметры:
//
// ОбрабатываемыеЭлементы - массив измененнных встреч
//
// Возвращаемое значение: 
// Булево - данные были успешно сохранены
&НаСервереБезКонтекста
Функция СохранитьИзмененияВБазу(Знач ОбрабатываемыеЭлементы)
	
	Возврат Справочники.Встречи.СохранитьИзменения(ОбрабатываемыеЭлементы);
	
КонецФункции

// Устанавливает заголовок формы, соотвествующий представлению отображаемого периода на основе текущих настроек
//
// Параметры:
//
// Форма - форма, в которой расположен элемент представления
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеПериодаВЗаголовке(Форма)
	
	Если Форма.ВариантПериода = "День" Тогда
		
		Форма.Заголовок = Формат(Форма.ДатаОтображения, "ДФ='ddd, d MMM yyyy'");
		
	ИначеЕсли Форма.ВариантПериода = "Неделя" Тогда
		
		ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
		Форма.Заголовок = СтрШаблон(
			"%1 - %2",
			Формат(ПериодДанных.ДатаНачала, "ДФ='d MMM'"),
			Формат(ПериодДанных.ДатаОкончания, "ДФ='d MMM yyyy'")
		);
		
	ИначеЕсли Форма.ВариантПериода = "Месяц" Тогда
		
		Форма.Заголовок = ПредставлениеПериода(НачалоМесяца(Форма.ДатаОтображения), КонецМесяца(Форма.ДатаОтображения));
		
	КонецЕсли;
	
КонецПроцедуры

// Настраивает отображение Планировщика на основе текущих настроек
&НаКлиенте
Процедура УстановитьОтображениеПланировщика()
	
	Если ВариантПериода = "День" Тогда
		
		Элементы.Планировщик.ГиперссылкаПеренесенногоЗаголовкаШкалыВремени = Ложь;
		Элементы.Планировщик.ГиперссылкаЭлементаШкалыВремени = Ложь;
		Планировщик.ФиксироватьЗаголовокШкалыВремени = Истина;
		Планировщик.ОтображатьТекущуюДату = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 9;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 6;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd" + Символы.ПС + "d MMMM'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=HH:mm";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
		Если Планировщик.ШкалаВремени.Элементы.Количество() = 1 Тогда
			Планировщик.ШкалаВремени.Элементы.Добавить();
		КонецЕсли;
			
		Планировщик.ШкалаВремени.Элементы[1].Кратность = 15;
		Планировщик.ШкалаВремени.Элементы[1].Единица = ТипЕдиницыШкалыВремени.Минута;
		Планировщик.ШкалаВремени.Элементы[1].ОтображатьПериодическиеМетки = Ложь;
		
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		
		Элементы.Планировщик.ГиперссылкаПеренесенногоЗаголовкаШкалыВремени = Истина;
		Элементы.Планировщик.ГиперссылкаЭлементаШкалыВремени = Ложь;
		Планировщик.ФиксироватьЗаголовокШкалыВремени = Истина;
		Планировщик.ОтображатьТекущуюДату = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 9;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 6;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd" + Символы.ПС + "d MMMM'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=HH:mm";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
		Если Планировщик.ШкалаВремени.Элементы.Количество() = 1 Тогда
			Планировщик.ШкалаВремени.Элементы.Добавить();
		КонецЕсли;
		
		Планировщик.ШкалаВремени.Элементы[1].Кратность = 15;
		Планировщик.ШкалаВремени.Элементы[1].Единица = ТипЕдиницыШкалыВремени.Минута;
		Планировщик.ШкалаВремени.Элементы[1].ОтображатьПериодическиеМетки = Ложь;
		
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		
		Элементы.Планировщик.ГиперссылкаПеренесенногоЗаголовкаШкалыВремени = Ложь;
		Элементы.Планировщик.ГиперссылкаЭлементаШкалыВремени = Истина;
		Планировщик.ФиксироватьЗаголовокШкалыВремени = Ложь;
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		
		Если Планировщик.ШкалаВремени.Элементы.Количество() = 2 Тогда
			Планировщик.ШкалаВремени.Элементы.Удалить(Планировщик.ШкалаВремени.Элементы.Получить(1));
		КонецЕсли;
		
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ='" + Символы.НПП + "d MMM, ddd'";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.День;
		
		
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоНедели(НачалоМесяца(ДатаОтображения)), НачалоМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(230, 230, 230);
		
		Интервал = Планировщик.ИнтервалыФона.Добавить(КонецМесяца(ДатаОтображения), КонецНедели(КонецМесяца(ДатаОтображения)));
		Интервал.Цвет = Новый Цвет(230, 230, 230);

		ТекущаяДата = ТекущаяДата();
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДата), КонецДня(ТекущаяДата));
		Интервал.Цвет = Новый Цвет(223, 255, 223);
		
	КонецЕсли;
	
	Если ОтображатьВстречиДругихПользователей Тогда
		
		//ПолучитьКодТекущегоПользователя();
		
		СоответствиеЗначений = Новый Соответствие;
		СоответствиеЗначений.Вставить("Пользователь", ТекущийПользовательБазы);
	
		ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
		Интервал = Планировщик.ИнтервалыФона.Добавить(ОкноПодгрузки.Начало, ОкноПодгрузки.Конец);
		Интервал.Цвет = Новый Цвет(223, 223, 255);
		Интервал.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеЗначений);
	КонецЕсли;
	
КонецПроцедуры

// Получает с сервера список пользователей для задания измерений Планировщика
&НаСервере
Процедура ЗаполнитьИзмеренияПланировщика()
	Планировщик.Измерения.Очистить();
	Если ОтображатьВстречиДругихПользователей Тогда
		ИзмерениеПланировщика = Неопределено;
		ПользователиБазы = Справочники.Пользователи.Выбрать();
		Пока ПользователиБазы.Следующий() Цикл
			Если Не ПользователиБазы.ПометкаУдаления = Истина Тогда
				Если ИзмерениеПланировщика = Неопределено Тогда
					ИзмерениеПланировщика = Планировщик.Измерения.Добавить("Пользователь");
				КонецЕсли;
				ЭлементИзмерения = ИзмерениеПланировщика.Элементы.Добавить(ПользователиБазы.Код);
				ЭлементИзмерения.Текст = ПользователиБазы.Наименование;
				//ЭлементИзмерения = Измерения.Добавить(ПользователиБазы.Код);
				//ЭлементИзмерения.Представление = ПользователиБазы.Наименование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Получает с сервера измерение, соответствующее текущему пользователю
&НаСервере
Процедура ПолучитьКодТекущегоПользователя()
	ТекущийПользовательБазы = "" + ПользователиИнформационнойБазы.ТекущийПользователь();
КонецПроцедуры

// Обновляет параметры планировщика, которые можно получить только на сервере
//
// Параметры:
//
// ПлавнаяПрокрутка - данные обновляются в результате прокрутки колесом и, возможно, подгрузка новых втреч не требуется
&НаСервере
Процедура ОбновитьДанныеПланировщикаСервер(ПлавнаяПрокрутка = Ложь)
	
	Если ПлавнаяПрокрутка Тогда
		Планировщик.Элементы.УдалитьНеиспользуемые();
	Иначе
		Планировщик.Элементы.Очистить();
	КонецЕсли;
	
	МассивЗагружаемыхПользователей = Новый Массив();
	
	Если ОтображатьВстречиДругихПользователей Тогда
		ПользователиБазы = Справочники.Пользователи.Выбрать();
		Пока ПользователиБазы.Следующий() Цикл
			Если Не ПользователиБазы.ПометкаУдаления = Истина Тогда
				МассивЗагружаемыхПользователей.Добавить(ПользователиБазы.Код);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
		МассивЗагружаемыхПользователей.Добавить(Пользователь);
	КонецЕсли;
	
	Для Каждого Пользователь из МассивЗагружаемыхПользователей Цикл
		Владелец = Справочники.Пользователи.НайтиПоКоду(Пользователь);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Встречи.Ссылка КАК Встреча,
		|	Встречи.Наименование КАК Наименование,
		|	Встречи.Начало КАК Начало,
		|	Встречи.Окончание КАК Конец,
		|	Встречи.Описание КАК Описание
		|ИЗ
		|	Справочник.Встречи КАК Встречи
		|ГДЕ
		|	Встречи.ПометкаУдаления = ЛОЖЬ
		|	И Встречи.Начало < &ДатаОкончания
		|	И Встречи.Окончание > &ДатаНачала
		|	И Встречи.Владелец = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начало";
		
		Запрос.УстановитьПараметр("ДатаНачала", ОкноПодгрузки.Начало);
		Запрос.УстановитьПараметр("ДатаОкончания", ОкноПодгрузки.Конец);
		Запрос.УстановитьПараметр("Пользователь", Владелец);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Значение = Выборка.Встреча;
			Если Планировщик.Элементы.Найти(Значение) = Неопределено Тогда
				ЭлементПланировщика = Планировщик.Элементы.Добавить(Выборка.Начало, Выборка.Конец);
				ЭлементПланировщика.Значение 	= Значение;
				ЭлементПланировщика.Текст		= Выборка.Наименование;
				ЭлементПланировщика.Подсказка	= Выборка.Описание;
				
				Если МассивЗагружаемыхПользователей.Количество() > 1 Тогда
					СоответствиеЗначений = Новый Соответствие;
					СоответствиеЗначений.Вставить("Пользователь", Пользователь);
					ЭлементПланировщика.ЗначенияИзмерений  = Новый ФиксированноеСоответствие(СоответствиеЗначений);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Польностью обновляет данные Планировщика
&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеПланировщикаКлиент();
	
КонецПроцедуры

// Открывает форму редактирования выбраной встречи
&НаКлиенте
Процедура ОткрытьФормуТекущегоЭлементаПланировщика()
	
	ЗначениеЭлемента = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЗначениеЭлемента);
	ОткрытьФорму("Справочник.Встречи.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

// Обработчик ожидания обновления данные Планировщика
&НаКлиенте
Процедура ОбновитьДанныеПланировщикаКлиентОбработчикОжидания() Экспорт
	
	ОбновитьДанныеПланировщикаКлиент();
	
КонецПроцедуры

// Обновляет данные Планировщика
&НаКлиенте
Процедура ОбновитьДанныеПланировщикаКлиент(ПлавнаяПрокрутка = Ложь)
	
	ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
	
	// ОбновлениеЭлементов
	НужноПодгрузитьЭлементы = Ложь;
	
	Если ПлавнаяПрокрутка Тогда
		Если ОкноПодгрузки.Конец <= ПериодДанных.ДатаОкончания 
			ИЛИ ОкноПодгрузки.Начало >= ПериодДанных.ДатаНачала Тогда
			НужноПодгрузитьЭлементы = Истина;
		КонецЕсли;
	Иначе
		НужноПодгрузитьЭлементы = Истина;
	КонецЕсли;
	
	Если НужноПодгрузитьЭлементы Тогда
		ОбновитьОкноПодгрузки();
		ОбновитьДанныеПланировщикаСервер(ПлавнаяПрокрутка);
	КонецЕсли;
	
	Если Не ПлавнаяПрокрутка ИЛИ НужноПодгрузитьЭлементы Тогда
		// ВнешнийВидПланировщика
		Планировщик.ИнтервалыФона.Очистить();
		УстановитьОтображениеПланировщика();
	КонецЕсли;

	
	Если Не ПлавнаяПрокрутка Тогда
		Планировщик.ТекущиеПериодыОтображения.Очистить();
		Планировщик.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает входящее оповещение
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Встречи" Тогда
	
		ОбновитьДанныеПланировщикаКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет окно, внутри которого кэшируются встречи
&НаКлиенте
Процедура ОбновитьОкноПодгрузки()
	ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
	
	Если ВариантПериода = "Месяц" Тогда
		ОкноПодгрузки.Начало = ДобавитьМесяц(ПериодДанных.ДатаНачала, 0);
		ОкноПодгрузки.Конец = ДобавитьМесяц(ПериодДанных.ДатаОкончания, 0);
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		ОкноПодгрузки.Начало = ПериодДанных.ДатаНачала - 3 * 7 * 24 * 60 * 60;
		ОкноПодгрузки.Конец = ПериодДанных.ДатаОкончания + 3 * 7 * 24 * 60 * 60;
	ИначеЕсли ВариантПериода = "День" Тогда
		ОкноПодгрузки.Начало = ПериодДанных.ДатаНачала - 3 * 24 * 60 * 60;
		ОкноПодгрузки.Конец = ПериодДанных.ДатаОкончания + 3 * 24 * 60 * 60;
	КонецЕсли
	
КонецПроцедуры

// Возвращает ссылку на элемент справочника "Пользователи" по коду
&НаСервереБезКонтекста
Функция ПолучитьПользователяПоКоду(КодПользователя)
	
	Возврат Справочники.Пользователи.НайтиПоКоду(КодПользователя);
	
КонецФункции

// Переключает вариант периода на "День"
&НаКлиенте
Процедура ФормаДень(Команда)
	
	ВариантПериода = "День";
	ПриИзмененииВариантПериода();
	
КонецПроцедуры

// Переключает вариант периода на "Неделя"
&НаКлиенте
Процедура ФормаНеделя(Команда)
	
	ВариантПериода = "Неделя";
	ПриИзмененииВариантПериода();
	
КонецПроцедуры

// Переключает вариант периода на "Месяц"
&НаКлиенте
Процедура ФормаМесяц(Команда)
	//ЗаполнитьСправочник();
	ВариантПериода = "Месяц";
	ПриИзмененииВариантПериода();
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВКалендарь(Кто, ДатаНачала, ДатаКонца, Наименование)
	запись = Справочники.Встречи.СоздатьЭлемент();
	запись.Владелец = Кто;
	запись.Начало = ДатаНачала;
	запись.Окончание = ДатаКонца;
	запись.Описание = Наименование;
	запись.Наименование = Наименование;
	запись.Записать();
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьСправочник()

	админ = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
	продавец = Справочники.Пользователи.НайтиПоНаименованию("Продавец");
	менеджер_по_продажам = Справочники.Пользователи.НайтиПоНаименованию("Менеджер по продажам");
	менеджер_по_закупкам = Справочники.Пользователи.НайтиПоНаименованию("Менеджер по закупкам");
	
	массив_пользователей = новый Массив;			
	массив_пользователей.Добавить(админ);
	массив_пользователей.Добавить(продавец);
	массив_пользователей.Добавить(менеджер_по_продажам);
	массив_пользователей.Добавить(менеджер_по_закупкам);
	
	//удаляем все данные справочника
	Выборка = Справочники.Встречи.Выбрать();
	Пока Выборка.Следующий() Цикл
	    Выборка.ПолучитьОбъект().Удалить();
	КонецЦикла;  

	//прописываем данные до конца 2020 года
	
	//цикл по месяцам
	начальная_дата = ТекущаяДата() - 60 * 60 * 24;
	конечная_дата  = КонецГода(начальная_дата);
	дата_цикла = начальная_дата;
	Пока Месяц(дата_цикла) <> Месяц(конечная_дата) Цикл
		дата_цикла = дата_цикла + 60 * 60 * 24;	
		
		//6 или 7 день - выходные, не планируем
		номер_дня = ДеньНедели(дата_цикла);
		Если номер_дня > 5 Тогда
			Продолжить;
		КонецЕсли;
		
		//для каждого дня создаем запись на каждого участника
		//Общие записи
		Для Каждого пользователь из массив_пользователей Цикл
		//ПЛАНЕРКА	с 9 до 9.15
			дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 9, 00, 00);
			дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 9, 20, 00);
			ЗаписатьВКалендарь(пользователь, дата_записи_начало, дата_записи_конец, "Планерка");
		//понедельник СОВЕЩАНИЕ С ДИРЕКТОРОМ
			Если номер_дня = 1 Тогда
				дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 10, 00, 00);
				дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 10, 45, 00);
				ЗаписатьВКалендарь(пользователь, дата_записи_начало, дата_записи_конец, "Совещание с директором");
			КонецЕсли;
		
		//ОБЕД с 12 до 13
			дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 12, 00, 00);
			дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 12, 45, 00);
			ЗаписатьВКалендарь(пользователь, дата_записи_начало, дата_записи_конец, "Обед");
		КонецЦикла;
		
		// ---------------------------------------------------------------- АДМИНИСТРАТОР
		// В понедельник - проверка оборудования
		//
			Если номер_дня = 1 Тогда
				дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 11, 00, 00);
				дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 12, 00, 00);
				ЗаписатьВКалендарь(админ, дата_записи_начало, дата_записи_конец, "Проверка оборудования");
			КонецЕсли;
		
		// ---------------------------------------------------------------- МЕНЕДЖЕР ПО ПРОДАЖАМ
			дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 10, 30, 00);
			дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 12, 00, 00);
			ЗаписатьВКалендарь(менеджер_по_продажам, дата_записи_начало, дата_записи_конец, "Обзвон потенциальных клиентов");

			дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 13, 00, 00);
			дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 15, 00, 00);
			ЗаписатьВКалендарь(менеджер_по_продажам, дата_записи_начало, дата_записи_конец, "Обзвон текущих клиентов");
			
			дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 15, 30, 00);
			дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 17, 30, 00);
			ЗаписатьВКалендарь(менеджер_по_продажам, дата_записи_начало, дата_записи_конец, "Встреча с клиентами");
			
			дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 17, 30, 00);
			дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 18, 00, 00);
			ЗаписатьВКалендарь(менеджер_по_продажам, дата_записи_начало, дата_записи_конец, "Подготовка презентации");
			
		// ---------------------------------------------------------------- МЕНЕДЖЕР ПО ЗАКУПКАМ
			дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 9, 30, 00);
			дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 10, 00, 00);
			ЗаписатьВКалендарь(менеджер_по_закупкам, дата_записи_начало, дата_записи_конец, "Оценка остатков, план по закупке");
			
			дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 10, 30, 00);
			дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 12, 00, 00);
			ЗаписатьВКалендарь(менеджер_по_закупкам, дата_записи_начало, дата_записи_конец, "Оформление заказов поставщикам");
			
			дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 13, 00, 00);
			дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 15, 00, 00);
			ЗаписатьВКалендарь(менеджер_по_закупкам, дата_записи_начало, дата_записи_конец, "Переговоры с поставщиками");
			
			дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 15, 30, 00);
			дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 16, 30, 00);
			ЗаписатьВКалендарь(менеджер_по_закупкам, дата_записи_начало, дата_записи_конец, "Анализ продаж");

			
		// ---------------------------------------------------------------- ПРОДАВЕЦ
			дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 10, 00, 00);
			дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 11, 00, 00);
			ЗаписатьВКалендарь(продавец, дата_записи_начало, дата_записи_конец, "Обработка заявок");

			дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 11, 00, 00);
			дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 12, 00, 00);
			ЗаписатьВКалендарь(продавец, дата_записи_начало, дата_записи_конец, "Обзвон клиентов");
			
			дата_записи_начало = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 13, 00, 00);
			дата_записи_конец = Дата(Год(дата_цикла), Месяц(дата_цикла), День(дата_цикла), 17, 30, 00);
			ЗаписатьВКалендарь(продавец, дата_записи_начало, дата_записи_конец, "Обработка заявок");

		
	КонецЦикла;
		
	
	//НомерДняНедели(
	//планерка
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриИзмененииВариантПериода()
	
	РаботаСХранилищемОбщихНастроек.СохранитьВариантПериодаКалендаряВстреч(ВариантПериода);
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	ВыделитьПериодОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериодаВЗаголовке(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	ОбновитьДанныеПланировщикаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтображенияВыбор(Элемент, ВыбраннаяДата)
	Элементы.ГруппаВыбораДат.Скрыть();	
КонецПроцедуры


